=begin
#WizardWorldApi

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0

=end

require 'cgi'

module OpenapiClient
  class ElixirsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [ElixirDifficulty] :difficulty 
    # @option opts [String] :ingredient 
    # @option opts [String] :inventor_full_name 
    # @option opts [String] :manufacturer 
    # @return [Array<ElixirDto>]
    def elixirs_get(opts = {})
      data, _status_code, _headers = elixirs_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [ElixirDifficulty] :difficulty 
    # @option opts [String] :ingredient 
    # @option opts [String] :inventor_full_name 
    # @option opts [String] :manufacturer 
    # @return [Array<(Array<ElixirDto>, Integer, Hash)>] Array<ElixirDto> data, response status code and response headers
    def elixirs_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElixirsApi.elixirs_get ...'
      end
      # resource path
      local_var_path = '/Elixirs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'Name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'Difficulty'] = opts[:'difficulty'] if !opts[:'difficulty'].nil?
      query_params[:'Ingredient'] = opts[:'ingredient'] if !opts[:'ingredient'].nil?
      query_params[:'InventorFullName'] = opts[:'inventor_full_name'] if !opts[:'inventor_full_name'].nil?
      query_params[:'Manufacturer'] = opts[:'manufacturer'] if !opts[:'manufacturer'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ElixirDto>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ElixirsApi.elixirs_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElixirsApi#elixirs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ElixirDto]
    def elixirs_id_get(id, opts = {})
      data, _status_code, _headers = elixirs_id_get_with_http_info(id, opts)
      data
    end

    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ElixirDto, Integer, Hash)>] ElixirDto data, response status code and response headers
    def elixirs_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElixirsApi.elixirs_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ElixirsApi.elixirs_id_get"
      end
      # resource path
      local_var_path = '/Elixirs/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ElixirDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ElixirsApi.elixirs_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElixirsApi#elixirs_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
